import java.util.*;

public class MotorCommand
{
    //in1 and in2 set direction as follows (1,1 = not used; 1,0 = forward; 0,1 = reverse; 0,0 = stop)
  private static int in1 = 2;                    //Sets the number of control pin 1 (controls direction) state is on or off 
  private static boolean direction = true;       //Does not set direction, only tracks. Change boolean everytime direction flips
  private static int in2 = 4;                    //Sets the number of control pin 2 (controls direction) state is on or off
  private static int enA= 19;                    //Sets the number of the pwm pin (controls motor speed)
  private static double pwmMax = 4000;           //Sets the maximum value the pwm pin can be set to
  private static double pwmCurrent = 0;          //Sets the initial value of the pwm pin
  private static String MotorSide = "Not set!";
  private static Runtime runTime = Runtime.getRuntime();
  
  public static void main(String args[]) {
        init();
        Scanner userInputScanner = new Scanner(System.in);
        System.out.println("Enter f to go forwards, r to reverse, s to stop");
        System.out.println("ss to set a variable speed");
            while (true) {
            String command = userInputScanner.nextLine();
            if (command.equals("f")) {
                stop();
                forward();
            } else if (command.equals("r")) {
                stop();
                reverse();
            } else if (command.equals("s")) {
                stop();
            } else if (command.equals("ss")) {
                speed();
            } else {
                System.out.println("Not a valid Command, please try again.");
            }
        }
    }
  public MotorCommand(int pin1, int pin2, int setpwmPin, double Maxpwm, String side){
        in1 = pin1;
        in2 = pin2;
        enA = setpwmPin;
        pwmMax = Maxpwm;
        MotorSide = side;
        //init();
    }
  public static void init() {
        try {
            runTime.exec("gpio -g mode " + enA + " pwm");
            runTime.exec("gpio -g pwm-ms");
            runTime.exec("gpio -g pwmc 205"); 
            runTime.exec("gpio -g pwmr " + pwmMax);
            runTime.exec("gpio -g pwm " + enA + " " + pwmCurrent);
            runTime.exec("gpio -g mode " + in1 + " out");
            runTime.exec("gpio -g mode " + in2 + " out");
            runTime.exec("gpio -g write " + in1 + " 1");
            runTime.exec("gpio -g write " + in2 + " 0");
            System.out.println(MotorSide);
        } catch (Exception e) {
            System.out.println("Exception occured: " + e.getMessage());
        }
    }
    
  public static void forward() {
        try {
            runTime.exec("gpio -g write " + in1 + " 1");
            runTime.exec("gpio -g write " + in2 + " 0");
            direction = false;
            Thread.sleep(250);
        } catch (Exception e) {
            System.out.println("Exception occured: " + e.getMessage());
        }
   }
    
  public static void reverse() {
        try {
            runTime.exec("gpio -g write " + in1 + " 0");
            runTime.exec("gpio -g write " + in2 + " 1");
            direction = true;
            Thread.sleep(250);
        } catch (Exception e) {
            System.out.println("Exception occured: " + e.getMessage());
        }
   }
    
  public static void stop() {
        try {
            runTime.exec("gpio -g write " + in1 + " 0");
            runTime.exec("gpio -g write " + in2 + " 0");
            runTime.exec("gpio -g pwm "+ enA + " 0");
            direction = false;
            pwmCurrent = 0;
            forward();
            Thread.sleep(250);
        } catch (Exception e) {
            System.out.println("Exception occured: " + e.getMessage());
        }
  }

    
  public static void speed() {
        Scanner speedScanner = new Scanner(System.in);
        System.out.println("Enter a range between -1 and 1.");
        System.out.println(MotorSide);
        try {
            double speedInput = speedScanner.nextDouble();
            variableSpeed(speedInput);
        } catch (Exception e) {
            System.out.println("Error");
        }
  }
    
  public static void variableSpeed(double speed) {
        double finalSpeed = 0.0;
        double absoluteValueSpeed = 0.0;
        try {
            if (speed > 1 || speed < -1) {
                System.out.println("Please enter a value between 1 and -1");    //Add throw error
            } else {
                finalSpeed = speed*pwmMax;
                absoluteValueSpeed = Math.abs(finalSpeed);
                if ((!direction && finalSpeed < 0) || (direction && finalSpeed > 0)) {
                    if (finalSpeed < 0) {
                        ramp(0.0);
                        pwmCurrent = 0;
                        reverse();
                        ramp(finalSpeed);
                        pwmCurrent = absoluteValueSpeed;
                        Thread.sleep(250);
                    } else {
                        ramp(0.0);
                        pwmCurrent = 0;
                        forward();
                        ramp(finalSpeed);
                        pwmCurrent = absoluteValueSpeed;
                        Thread.sleep(250);
                    }
                } else {
                    if (finalSpeed < 0) {
                        ramp(finalSpeed);
                        pwmCurrent = absoluteValueSpeed;
                        Thread.sleep(250);
                    } else {
                        ramp(finalSpeed);
                        pwmCurrent = absoluteValueSpeed;
                        Thread.sleep(250);
                    }
            }
        }
        } catch (Exception e) {
            System.out.println("Exception occured: " + e.getMessage());
        }
  }
    
  public static void ramp(double directionalSpeed) {
        double difference = 0.0, calculating = 0.0, stepNumber = 50.0;
        double tempSpeed = Math.abs(directionalSpeed);
            try {
                difference = tempSpeed - pwmCurrent;
                calculating = difference/stepNumber;
                while(pwmCurrent != tempSpeed) {
                    runTime.exec("gpio -g pwm "+ enA + " " + (pwmCurrent + calculating));
                    pwmCurrent += calculating;
                    Thread.sleep(20);
                }
            } catch (Exception e) {
                System.out.println("Exception occured: " + e.getMessage());
            }
  }
}

/*          
 * Speed test commands
    public static void high() {
        try {
            runTime.exec("gpio -g pwm " + enA + " " + pwmMax);
            Thread.sleep(250);
        } catch (Exception e) {
            System.out.println("Exception occured: " + e.getMessage());
        }
    }
    
    public static void low() {
        try {
            runTime.exec("gpio -g pwm " + enA + " " + (pwmMax/4));
            Thread.sleep(250);
        } catch (Exception e) {
            System.out.println("Exception occured: " + e.getMessage());
        }
    }
    
    public static void mid() {
        try {
            runTime.exec("gpio -g pwm "+ enA + " " + (pwmMax/2));
            Thread.sleep(250);
        } catch (Exception e) {
            System.out.println("Exception occured: " + e.getMessage());
        }
    }
*/

from Motor.java

//Has a scanner request for a speed value to send along to the variableSpeed function
    public void speed() {
        Scanner speedScanner = new Scanner(System.in);
        System.out.println("Enter a range between -1 and 1.");
        System.out.println(MotorSide);
        try {
            float speedInput = speedScanner.nextFloat();
            variableSpeed(speedInput);
        } catch (Exception e) {
            MotorController.errorHandler(e);
        }
    }

//Sets the directional pins to zero and then the pwm pin to zero after which it sets the pins for going forwards
    public void stop() {
        try {
            runTime.exec("gpio -g write " + in1 + " 0");
            runTime.exec("gpio -g write " + in2 + " 0");
            runTime.exec("gpio -g pwm "+ enA + " 0");
            pwmCurrent = 0;
            forward();
            Thread.sleep(250);
        } catch (Exception e) {
            MotorController.errorHandler(e);
        }
    }
